// Generated by CoffeeScript 1.7.1

/*
  autor Volosincu Bogdan
 */
(function(context, factory) {
  if (typeof define === 'function' && define.amd) {
    define(['exports'], function(exports) {
      context.Proto = factory(context, exports);
      return context.Proto;
    });
  } else if (typeof exports !== 'undefined') {
    factory(context, exports);
  } else {
    context.Proto = factory(context, {});
  }
})(this, function(context, Proto) {
  Proto = (function() {
    var cks_attached, isFunction;

    cks_attached = {};

    isFunction = function(o) {
      return typeof o === 'function';
    };

    function Proto(object) {
      var key, value;
      for (key in object) {
        value = object[key];
        if (isFunction(value)) {
          Proto.prototype[key] = function() {
            var i, k, result, _i, _len, _ref;
            result = {};
            _ref = cks_attached[key];
            for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
              k = _ref[i];
              if (k !== void 0) {
                if (i === 0) {
                  result = k.apply(Proto.prototype, arguments);
                } else {
                  k.apply(Proto.prototype);
                }
              }
            }
            return result;
          };
          cks_attached[key] = [value];
        } else {
          Proto.prototype[key] = value;
        }
      }
    }

    Proto.prototype.attachTo = function(prop, theFunc, withPriority) {
      if (arguments[3] === void 0) {
        withPriority = cks_attached[prop].length++;
      }
      if (cks_attached[prop][withPriority] === void 0 || cks_attached[prop][withPriority] === null) {
        cks_attached[prop][withPriority] = theFunc;
      } else {
        Array.prototype.splice.call(cks_attached[prop], withPriority, 0, theFunc);
      }
    };

    return Proto;

  })();
  return Proto;
});
